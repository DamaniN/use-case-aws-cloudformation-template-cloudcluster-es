AWSTemplateFormatVersion: '2010-09-09'
Description: "Create a 3 Node Rubrik Cloud Cluster ES"

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: AWS Deployment
      Parameters:
      - ClusterName
      - ImageId
      - AvailabilityZone
      - SubnetId
      - Vpc
      - S3BucketName
      - CreateS3GatewayEndpoint
      - RoleName
      - RolePolicyName
      - InstanceProfileName
      - KeyPairName
      - AdminCidr
    - Label:
        default: Cloud Cluster Size
      Parameters:
      - NodeType
    - Label:
        default: Cloud Cluster Bootstrap Parameters
      Parameters:
      - EnableImmutability


Parameters:
  NodeType:
    Description: "Specify the type of Cloud Cluster ES Nodes to deploy."
    Type: String
    Default: Dense
    AllowedValues:
      - Dense
      - Standard
  AvailabilityZone:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: "Availability Zone that Cloud Cluster will run in."
  ClusterName:
    Type: String
    Default: Rubrik-CloudCluster
    Description: "Enter the Name tag to be used for the Rubrik CloudCluster nodes in AWS."
  ImageId:
    Type: AWS::EC2::Image::Id
    Description: "AMI ID of the Rubrik CloudCluster image shared by Rubrik. The description of the AMI should be something like: rubrik-4-1-1-p2-2263."
  S3BucketName:
    Type: String
    Default: ""
    Description: "Name of the S3 bucket to use with Cloud Cluster ES data storage. If blank a name will be auto generated."
  CreateS3GatewayEndpoint:
    Type: String
    Description: "Create S3 Gateway Endpoint? An S3 endpoint is required in the VPC where Cloud Cluster ES will run. If an S3 endpoint already exists that will service the S3 bucket this option can be set to 'No'"
    Default: true
    AllowedValues:
      - true
      - false
  RoleName:
    Type: String
    Default: ""
    Description: "AWS IAM Role name for Cloud Cluster ES. If blank a name will be auto generated."
  RolePolicyName:
    Type: String
    Default: ""
    Description: "AWS IAM Role policy name for Cloud Cluster ES.  If blank a name will be auto generated."
  InstanceProfileName:
    Type: String
    Default: ""
    Description: "AWS EC2 Instance Profile name that links the IAM Role to Cloud Cluster ES. If blank a name will be auto generated."
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: "The name of an existing Amazon EC2 key pair in this region to use to SSH into the Amazon EC2 instances."
  AdminCidr: 
    Type: String
    Default: "0.0.0.0/0"
    Description: "The CIDR range for the systems used to administer the Cloud Cluster via SSH and HTTPS."
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "Enter a valid IP CIDR range in the form x.x.x.x/x."
  Vpc:
    Type: AWS::EC2::VPC::Id
    Description: "The VPC Subnet ID to launch Rubrik Cloud Cluster in."
  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: "The Subnet to assign to the Cloud Cluster instances."
  EnableImmutability:
    Description: "Enable immutable Cloud Cluster ES?"
    Type: String
    Default: true
    AllowedValues:
      - true
      - false


Conditions:
  NoRoleNameProvided: !Equals [!Ref RoleName, ""]
  NoRolePolicyNameProvided: !Equals [!Ref RolePolicyName, ""]
  NoInstanceProfileNameProvided: !Equals [!Ref InstanceProfileName, ""]
  EnableImmutabilityYes: !Equals [!Ref EnableImmutability, true]
  EnableImmutabilityNo: !Equals [!Ref EnableImmutability, false]
  CreateS3GatewayEndpointYes: !Equals [!Ref CreateS3GatewayEndpoint, true]
  NoS3BucketNameProvided: !Equals [!Ref S3BucketName, ""]


Mappings:
  NodeType:
    Dense:
      InstanceType: m6i.4xlarge
    Standard:
      InstanceType: m6i.2xlarge

Resources:

  NodesSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join ["-", [!Ref ClusterName, nodes, sg] ]
      GroupDescription: "Allow hosts to talk to Rubrik Cloud Cluster and Cluster to talk to itself"
      SecurityGroupIngress:
        - IpProtocol: tcp
          Description: "HTTPS over TCP from Admin Hosts"
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref AdminCidr
        - IpProtocol: tcp
          Description: "SSH over TCP from Admin Hosts"
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref AdminCidr
      VpcId: !Ref Vpc

  NodeSecurityGroupSelfIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: "Allow Cluster to talk to itself"
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !GetAtt NodesSecurityGroup.GroupId
      GroupId: !GetAtt NodesSecurityGroup.GroupId
  NodeSecurityGroupHttpsIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: "HTTPS over TCP"
      FromPort: 443
      ToPort: 443
      SourceSecurityGroupId: !GetAtt HostsSecurityGroup.GroupId
      GroupId: !GetAtt NodesSecurityGroup.GroupId
  NodeSecurityGroupSshIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: "SSH over TCP"
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId: !GetAtt HostsSecurityGroup.GroupId
      GroupId: !GetAtt NodesSecurityGroup.GroupId
  NodeSecurityGroupNfsIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: "NFS over TCP"
      FromPort: 2049
      ToPort: 2049
      SourceSecurityGroupId: !GetAtt HostsSecurityGroup.GroupId
      GroupId: !GetAtt NodesSecurityGroup.GroupId
  NodeSecurityGroupSecureSmbIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: "Secure SMB over TCP"
      FromPort: 455
      ToPort: 455
      SourceSecurityGroupId: !GetAtt HostsSecurityGroup.GroupId
      GroupId: !GetAtt NodesSecurityGroup.GroupId
  NodeSecurityGroupSmbTcpIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: "SMB over TCP via NetBIOS"
      FromPort: 137
      ToPort: 139
      SourceSecurityGroupId: !GetAtt HostsSecurityGroup.GroupId
      GroupId: !GetAtt NodesSecurityGroup.GroupId
  NodeSecurityGroupSmbUdpIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: udp
      Description: "SMB over UDP via NetBIOS"
      FromPort: 137
      ToPort: 139
      SourceSecurityGroupId: !GetAtt HostsSecurityGroup.GroupId
      GroupId: !GetAtt NodesSecurityGroup.GroupId

  HostsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join ["-", [!Ref ClusterName, hosts, sg]]
      GroupDescription: "Allow Rubrik Cloud Cluster to talk to hosts, and hosts with this security group can talk to cluster"
      SecurityGroupIngress:
        - IpProtocol: tcp
          Description: "Ports for Rubrik Backup Service (RBS)"
          FromPort: 12800
          ToPort: 12801
          SourceSecurityGroupId: !GetAtt NodesSecurityGroup.GroupId
      VpcId: !Ref Vpc

  RubrikEc2S3Role: 
    Type: AWS::IAM::Role
    Properties:
      RoleName: !If [ NoRoleNameProvided, !Sub '${ClusterName}.role', !Ref RoleName ]
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
  RubrikEc2S3PolicyImmutable: 
    Type: AWS::IAM::Policy
    Condition: EnableImmutabilityYes
    Properties: 
      PolicyName: !If [ NoRolePolicyNameProvided, !Sub '${ClusterName}.role-policy', !Ref RolePolicyName ]
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Action:
              - s3:AbortMultipartUpload
              - s3:DeleteObject*
              - s3:GetObject*
              - s3:ListMultipartUploadParts
              - s3:PutObject*
            Resource: !Join [ '', ['arn:aws:s3:::', !If [ NoS3BucketNameProvided, !Sub '${ClusterName}.bucket-do-not-delete', !Ref S3BucketName ], "/*" ] ]
          - Effect: "Allow"
            Action:
              - s3:GetBucket*
              - s3:ListBucket*
              - s3:GetBucketObjectLockConfiguration
              - s3:GetObjectLegalHold
              - s3:GetObjectRetention
              - s3:PutBucketObjectLockConfiguration
              - s3:PutObjectLegalHold
              - s3:PutObjectRetention
            Resource: !Join [ '', ['arn:aws:s3:::', !If [ NoS3BucketNameProvided, !Sub '${ClusterName}.bucket-do-not-delete', !Ref S3BucketName ] ] ]
      Roles: 
        - !Ref RubrikEc2S3Role

  RubrikEc2S3PolicyNonImmutable: 
    Type: "AWS::IAM::Policy"
    Condition: EnableImmutabilityNo
    Properties: 
      PolicyName: !If [ NoRoleNameProvided, !Sub '${ClusterName}.role-policy', !Ref RolePolicyName ]
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Action:
              - s3:AbortMultipartUpload
              - s3:DeleteObject*
              - s3:GetObject*
              - s3:ListMultipartUploadParts
              - s3:PutObject*
            Resource: !Join [ '', ['arn:aws:s3:::', !If [ NoS3BucketNameProvided, !Sub '${ClusterName}.bucket-do-not-delete', !Ref S3BucketName ], '/*' ] ]
          - Effect: "Allow"
            Action:
              - s3:GetBucket*
              - s3:ListBucket*
            Resource: !Join [ '', ['arn:aws:s3:::', !If [ NoS3BucketNameProvided, !Sub '${ClusterName}.bucket-do-not-delete', !Ref S3BucketName ] ] ]
      Roles: 
      - !Ref RubrikEc2S3Role

  RubrikEc2InstanceProfile: 
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: !If [ NoInstanceProfileNameProvided, !Sub '${ClusterName}.instance-profile', !Ref InstanceProfileName ]
      Path: "/"
      Roles: 
      - !Ref RubrikEc2S3Role
        
  S3BucketImmutable:
    Type: AWS::S3::Bucket
    Condition: EnableImmutabilityYes
    Properties:
      BucketName: !If [ NoS3BucketNameProvided, !Sub '${ClusterName}.bucket-do-not-delete', !Ref S3BucketName]
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'AES256'
            BucketKeyEnabled: true
      ObjectLockEnabled: true
      VersioningConfiguration:
        Status: Enabled

  S3BucketNonImmutable:
    Type: AWS::S3::Bucket
    Condition: EnableImmutabilityNo
    Properties:
      BucketName: !If [ NoS3BucketNameProvided, !Sub '${ClusterName}.bucket-do-not-delete', !Ref S3BucketName]
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'AES256'
            BucketKeyEnabled: true

  S3GatewayEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Condition: CreateS3GatewayEndpointYes
    Properties:
      VpcEndpointType: 'Gateway'
      VpcId: !Ref Vpc
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'

  Node01:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
      - Key: Name
        Value: !Ref ClusterName
      ImageId: !Ref ImageId
      InstanceType: !FindInMap [
          NodeType,
          !Ref NodeType,
          InstanceType,
        ]
      KeyName: !Ref KeyPairName
      AvailabilityZone: !Ref AvailabilityZone
      SecurityGroupIds:
        - !Ref NodesSecurityGroup
        - !Ref HostsSecurityGroup
      SubnetId: !Ref SubnetId
      DisableApiTermination: true
      IamInstanceProfile: !If [ NoInstanceProfileNameProvided, !Sub '${ClusterName}.instance-profile', !Ref InstanceProfileName ]
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeType: gp3
            Encrypted: 'true'
            DeleteOnTermination: 'true'
        - DeviceName: "/dev/sdb"
          Ebs:
            VolumeType: gp3
            Encrypted: 'true'
            DeleteOnTermination: 'true'
            VolumeSize: '512'

Outputs:
  S3BucketName:
    Description: "Name of the S3 Bucket"
    Value: !If [ NoS3BucketNameProvided, !Sub '${ClusterName}.bucket-do-not-delete', !Ref S3BucketName]

  Node01PrivateIP42:
    Description: "Private IP address for Node01"
    Value:
      !GetAtt
      - Node01
      - PrivateIp